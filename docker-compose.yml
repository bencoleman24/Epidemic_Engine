version: "3.8"

services:
  kafka:
    image: bitnami/kafka:3.7
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - kafka_default
    restart: on-failure

  consumer:
    build:
      context: ./kafka_server
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - kafka_default
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=health_events_db
    command: python consumer.py
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h postgres -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=health_events_db
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_bind:/var/lib/postgresql/data
      - ./kafka_server/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - kafka_default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  predictor:
    build:
      context: ./modeling
      dockerfile: Dockerfile.predictor
    depends_on:
      - postgres
    networks:
      - kafka_default
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=health_events_db
    command: ["bash", "-c", "sleep 120 && while true; do python /app/modeling/predict.py; sleep 600; done"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h postgres -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  visualization:
    build:
      context: ./visualization
      dockerfile: Dockerfile.visualization
    depends_on:
      - postgres
    networks:
      - kafka_default
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=health_events_db
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h postgres -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

volumes:
  kafka_data:
    driver: local
  postgres_data:
    driver: local

networks:
  kafka_default:
    driver: bridge
